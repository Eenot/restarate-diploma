DROP TABLE IF EXISTS category CASCADE;
DROP TABLE IF EXISTS pricing CASCADE;
DROP TABLE IF EXISTS dish CASCADE;
DROP TABLE IF EXISTS dish_category CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS favorite_dishes CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS review_likes CASCADE;
DROP TABLE IF EXISTS authors CASCADE;
DROP TABLE IF EXISTS dish_authors CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS events_operation CASCADE;
DROP TABLE IF EXISTS events_type CASCADE;

--CATEGORY
create table if not exists category
(
    id   INTEGER auto_increment,
    name varchar(255) not null,
    constraint category_catalog_pk
        primary key (id)
);

comment on table category is 'Таблица с каталожных значений категорий блюд';


--- PRICING
create table if not exists pricing
(
    id   INTEGER auto_increment,
    name varchar(10) not null,
    constraint pricing_pk
        primary key (id)
);

comment on table pricing is 'Таблица с каталожными значениями ценовых категорий';

--- DISH
create table if not exists dish
(
    id           int auto_increment
        primary key,
    name         varchar(255) not null,
    description  varchar(200) not null,
    release_date timestamp    not null,
    weight     int,
    pricing       int,
    constraint DISH_PRICING_ID_FK
        foreign key (PRICING) references PRICING

);

comment on table dish is 'Таблица с данными о блюдах';

--- DISH_CATEGORY
create table if not exists dish_category
(
    dish_id  int not null,
    category_id int not null,
    constraint DISH_CATEGORY_DISH_ID_FK
        foreign key (dish_id) references DISH ON DELETE CASCADE,
    constraint DISH_CATEGORY_CATEGORY_ID_FK
        foreign key (category_id) references CATEGORY ON DELETE CASCADE
);

comment on table dish_category is 'Таблица развязки блюд и их категорий';

---USERS
create table if not exists users
(
    id       int auto_increment
        primary key,
    email    varchar(255) not null,
    login    varchar(255) not null,
    name     varchar(255),
    birthday date         not null
);

comment on table users is 'Таблица с данными о пользователях';


---FAVORITE_DISHES
create table if not exists favorite_dishes
(
    user_id int not null,
    dish_id int not null,
    constraint FAVORITE_DISHES_DISH_ID_FK
        foreign key (dish_id) references DISH ON DELETE CASCADE,
    constraint FAVORITE_DISHES_USERS_ID_FK
        foreign key (user_id) references USERS ON DELETE CASCADE
);

comment on table favorite_dishes is 'Таблица развязки по избранным блюдам пользователя';

---FRIENDSHIP
create table if not exists friendship
(
    user_from int     not null,
    user_to   int     not null,
    approved  boolean not null default false,
    constraint FRIENDSHIP_USERS_ID_FK
        foreign key (user_from) references USERS ON DELETE CASCADE,
    constraint FRIENDSHIP_USERS_ID_FK_2
        foreign key (user_to) references USERS ON DELETE CASCADE
);

comment on table friendship is 'Таблица дружбы между пользователями';

--REVIEW
create table if not exists reviews
(
    review_id INTEGER auto_increment,
    content   varchar(1000) not null,
    positive  boolean not null,
    user_id   INTEGER not null,
    dish_id   INTEGER not null,
    useful    INTEGER not null default  0,
    constraint reviews_pk
        primary key (review_id),
    constraint reviews_DISH_ID_fk
        foreign key (dish_id) references DISH ON DELETE CASCADE,
    constraint reviews_USERS_ID_fk
        foreign key (user_id) references USERS ON DELETE CASCADE
);

comment on table reviews is 'Таблица с отзывами о блюдах';

create table if not exists review_likes
(
    review_Id INTEGER not null,
    user_id   INTEGER not null,
    is_liked  boolean not null,
    constraint review_likes_REVIEWS_REVIEW_ID_fk
        foreign key (review_Id) references REVIEWS ON DELETE CASCADE,
    constraint review_likes_USERS_ID_fk
        foreign key (user_id) references USERS ON DELETE CASCADE
);

comment on table review_likes is 'Таблица для оценки отзывов пользователями';


create table if not exists authors
(
    id  INTEGER auto_increment primary key,
    name varchar(40) not null
);

comment on table authors is 'Таблица с данными авторов';

create table IF not exists dish_authors
(
    dish_id     INTEGER REFERENCES dish (id) ON delete CASCADE,
    author_id INTEGER REFERENCES authors (id) ON delete CASCADE
);


CREATE TABLE IF NOT EXISTS events_type
(
    events_type_id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    events_name                  VARCHAR(20)
);


CREATE TABLE IF NOT EXISTS events_operation
(
    events_operation_id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    operation_name              VARCHAR(20)
);


CREATE TABLE IF NOT EXISTS events
(
    events_id                    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    add_timestamp               BIGINT,
    user_id                     INTEGER REFERENCES users(id) ON DELETE CASCADE ON UPDATE CASCADE,
    events_type_id               INTEGER REFERENCES events_type(events_type_id) ON DELETE CASCADE ON UPDATE CASCADE,
    events_operation_id          INTEGER REFERENCES events_operation(events_operation_id) ON DELETE CASCADE ON UPDATE CASCADE,
    entity_id                   BIGINT
);
